
/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractMethod,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  Point,
  PublicKey,
  Wallet,
} from '@aztec/aztec.js';
import dexContractArtifactJson from '../../contracts/dex/target/dex.json' assert { type: 'json' };
export const dexContractArtifact = dexContractArtifactJson as ContractArtifact;

/**
 * Type-safe interface for contract dex;
 */
export class dexContract extends ContractBase {
  
  private constructor(
    completeAddress: CompleteAddress,
    wallet: Wallet,
    portalContract = EthAddress.ZERO
  ) {
    super(completeAddress, dexContractArtifact, wallet, portalContract);
  }
  

  
  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(
    address: AztecAddress,
    wallet: Wallet,
  ) {
    return Contract.at(address, dexContract.artifact, wallet) as Promise<dexContract>;
  }

  
  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet, owner: AztecAddressLike) {
    return new DeployMethod<dexContract>(Point.ZERO, wallet, dexContractArtifact, Array.from(arguments).slice(1));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(publicKey: PublicKey, wallet: Wallet, owner: AztecAddressLike) {
    return new DeployMethod<dexContract>(publicKey, wallet, dexContractArtifact, Array.from(arguments).slice(2));
  }
  

  
  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return dexContractArtifact;
  }
  

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    
    /** _initialize(owner: field) */
    _initialize: ((owner: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** compute_note_hash_and_nullifier(contract_address: field, nonce: field, storage_slot: field, serialized_note: array) */
    compute_note_hash_and_nullifier: ((contract_address: FieldLike, nonce: FieldLike, storage_slot: FieldLike, serialized_note: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** create(token0_: struct, token1_: struct, reserve0_: field, reserve1_: field, nonce_for_transfer0_: field, nonce_for_transfer1_: field) */
    create: ((token0_: AztecAddressLike, token1_: AztecAddressLike, reserve0_: FieldLike, reserve1_: FieldLike, nonce_for_transfer0_: FieldLike, nonce_for_transfer1_: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_reserves() */
    get_reserves: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** serializeU120(value: struct) */
    serializeU120: ((value: { value: (bigint | number) }) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** swap(token_in_: struct, amount_in_: field, nonce_for_transfer_: field) */
    swap: ((token_in_: AztecAddressLike, amount_in_: FieldLike, nonce_for_transfer_: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** test(token_in_: struct, amount_in_: field, nonce_for_transfer_: field) */
    test: ((token_in_: AztecAddressLike, amount_in_: FieldLike, nonce_for_transfer_: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
  };
}
