{
  "name": "dex",
  "functions": [
    {
      "name": "_initialize",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "serialized_note",
          "type": {
            "kind": "array",
            "length": 0,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/+2VUQ6CMAyGu00GxcQ7eIOZeADufypXbJPfqk/WBwJNmkHH2q9/tjESUaKnle4nejebX3Rsv9ktxeVq/+TMG+EsgZzpA2eCfSHj0L12H7tfNc4at31kMVuXIVZcfoZ5swrPS1BvNV77Nig/wYj9XkCrwLp3dhqhnl43gvqyZoplWXXl4JySYwZ+69XYzzDP8M0cy7HeVRO9amrvyHew7puVIVYhlh2znEN/TkN/BKQFpHCBGt8ucLMHOSrVPQkIAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "create",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "token0_",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token1_",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "reserve0_",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "reserve1_",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce_for_transfer0_",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce_for_transfer1_",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_reserves",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/8WWS07EMAxA07RpSKbTucqAYMciC07ADUZixBIJuL+gpVYfJoOQSFRvmo9jP1txY2uMacyXtGaVBl+rxg/LvId+Wr7Hf0oP36Vsuk8bbrEVwCxxjUsstqzf210mnz3yXMjPdWO+S8K4RdxaL2DfYs2qs1Pu7rHfZc6IbpfRY+yuQuz0kzAXXxEMHVj6sizHyYY3q7TwJRzC5LHny3Lc8d45+LmqkHtKwlh8XaqBLVgu1YDse6xZdVbXgPxHbMZOyOgx9lghdvpJmEd8G8W3JYvLsOzKssz1OJhV9J2MYBrAsS/LcRMUh+SGkjDeg2UsyzLn5ABfwjUiN7LPf8ehLMd8T0YVv8zJ91fWuDFrwNqANfYYk3hTpweo8bbyDRf57d6K/6nOpMbe3l9eT8/nx/PpiS2lbg0szHDM9kWeUbYYoit73vxELJYPbVf3xSIft8iC+FQLAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "serializeU120",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "value",
          "type": {
            "kind": "struct",
            "path": "safe_math::safe_u120::SafeU120",
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 120
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 1,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/62TWQ6AIBBDB9lCTPzwJHgD7n8qJTLJEz6dJoRSlpZtExEnLzw4oVobdf2Hy9mtVR0yKt+ecg5eRptI4M0oR7I/pxqRtSCz7ucYup/0Pica31n3CfLF/FYaeESWZJul9jUyvAK8Onb0e/Rl4zNxsr4lbatXgRag8a50/PL3mmFQmQz4WRQ3IvKoRA0EAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "swap",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "token_in_",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amount_in_",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce_for_transfer_",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "test",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "token_in_",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amount_in_",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce_for_transfer_",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "eJztnN1O3DAQhd8l1ytke2yPva9S9QK1VEJCUBXu0L57U3XjoGzqEXU4s1i5IkgO+fbs8tln8/M6PDx9u325f3p8Ho6vAw3HL6/D88/bxz+/Pb/c/noZjuYw3D1+H3+eDsOP+4e74WhPh4tRlijk88hxO9kymnhtuHfGT8O9i8LwTOE8OCcqQ709fT0M/jNCByD0OKZAU07/Dx3XoJ03dN7D+eQEdPahoHOcX6g3H5s3w9E3Sz1tgJ5NQU/OvkUfD5A3OABz5QDWtB8hkStHyM6J6Yf5g+MTL4EsHCim+ePAJiyB3LUBrU4FmkCrmtcEWlW4JtAGet4WaAPpbgu0gUq3BdpAvZsCObypBSC8qbnMxeN2cEsgvKkFILypBSC8qQUgvKkFILypBSC8qQUgvKkFILyp60CEN7UApGDqFAtQMrQEUjB1HUjB1HUgBVPXgRRMXQdSMHUdSMHUdSAFU9eBFExdBfIKpq4DwU0dnClfQAVnl1/HeLipJSC4qSUguKklILipJSC4qSUguKklILipJSC4qQWgADe1BKRg6hBnIPZLIAVT14EUTF0HUjB1HUjB1HUgBVPXgRRMXQdSMHUdSMHUVaCoYOo6EN7U5OapgygtgfCmFoDwphaA8KYWgPCmFoDwphaA8KYWgPCmFoDwpq4DMd7UAhDc1NHFcoozkslLILipIzmegdJyLmO4qaO3tgD5i1MLDDd1THFOKLuLhOCmjtm7GSgviyLDTc3GlrNBbPjivwxuaja5LNDY5uU1aAw3NTtTLtNkl5ZXNjDc1ExufsuIYn14pAkkhvnd5bWhgezEEcZ1chn8/ksd4ZPFJ8gEPl+9MxOe/nZ8o6XVTKzJ88U+1lhXT8UbO0nYG84NEcJn2I+L0Nr53I51REIqyVGJJbdECF8T9BchfBXTX4TwdVd/EeJXit1FiF/bdhchfjXeXYTX3h+uP8J87XXjE0TYUTvRinBvJ80R7u2kOcK9nTRHuLeT5gj3dtIc4d5OmiPsqZ1QCWXcDmIqNN03n70xDRH21E50IrSmp3qilWFP/UQrw54KilaGPTUUrQx7qihaGfbUUbQy7KmkaGXYU0vRynCvKe0Z7j2lOUP84906zHDvKe0Z7j2lPcO9p7Rn2FNP4VwepGkTN8Vy5dUj8HTbCHuqx1K9LuNmtR7Y8gjWt7d5h/h3FXKzupSL5a4IdvM+0Z/3WV26CPusz9XSTquT0793Op1+AzTOIx4=",
      "",
      "eJzNl8tqhEAQRf+l1hKmqvph/JWQhSQTGBicEN2J/54ZMkrALtw03XfXwi04YPW5OtP19tFPl9swUjfT6cVT9zbT+N0Pj+dx6n8m6oJK29B5+HwcPS8NfV2uZ+rup12WJcgzy6q6ZaNPhDWGZ9Zx3KIhLu/NnSUAsUQglhaI5RWIhU9IMIwEI0gwigTjkGCQ7MtI+mUk/zKSgLmsgZ3oCuPkP8w+Krxyi/gt2ro/bikr63zcZb2ej9uoAK8bdwylllaMCqgDY1RAHRijAurAGBVQB8aogDowRgXUgTEqoAqMGl6vA2PIug4MkoEVycCKZGBFMrAiGViRDKxIBlYkAzskAzskA7uyBs727e7Kyjofd1mvZ+MOyRskvP7iife73QrJRT+YSe7jwUxyFw5mku/BnlmWX6eo/x8=",
      "eJyrVsrJT04syczPK1ayqlYy0DNTsoquViouSMwD8YtLEotKlKzMzA1MdJRS81JATCOTWh2ltMycVCUrw9rY2loA0tEU0Q==",
      "",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod types;\nmod interfaces;\n\ncontract dex {\n    use dep::aztec::{\n        context::{PrivateContext, PublicContext, Context},\n        state_vars::{public_state::PublicState},\n        types::type_serialization::field_serialization::{\n            FieldSerializationMethods, FIELD_SERIALIZED_LEN,\n        },\n        types::type_serialization::aztec_address_serialization::{\n            AztecAddressSerializationMethods, AZTEC_ADDRESS_SERIALIZED_LEN\n        },\n        types::address::{AztecAddress},\n        selector::compute_selector,\n    };\n    use dep::safe_math::SafeU120;\n    use crate::interfaces::Token;\n    use crate::types::{\n            safe_u120_serialization::{SafeU120SerializationMethods, SAFE_U120_SERIALIZED_LEN}\n        };\n\n    struct Storage {\n        owner: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n\n        token0: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n        token1: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n\n        reserve0: PublicState<Field, FIELD_SERIALIZED_LEN>,\n        reserve1: PublicState<Field, FIELD_SERIALIZED_LEN>,\n\n        kLast: PublicState<Field, FIELD_SERIALIZED_LEN>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                owner: PublicState::new(\n                    context,\n                    1,\n                    AztecAddressSerializationMethods,\n                ),\n\n                token0: PublicState::new(\n                    context,\n                    2,\n                    AztecAddressSerializationMethods,\n                ),\n                token1: PublicState::new(\n                    context,\n                    3,\n                    AztecAddressSerializationMethods,\n                ),\n\n                reserve0: PublicState::new(\n                    context,\n                    4,\n                    FieldSerializationMethods,\n                ),\n                reserve1: PublicState::new(\n                    context,\n                    5,\n                    FieldSerializationMethods,\n                ),\n\n                kLast: PublicState::new(\n                    context,\n                    6,\n                    FieldSerializationMethods,\n                ),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor(owner: AztecAddress) {\n        let selector = compute_selector(\"_initialize(Field)\");\n        context.call_public_function(context.this_address(), selector, [owner.address]);\n    }\n\n    #[aztec(public)]\n    internal fn _initialize(\n        owner: Field,\n    ) {\n        assert(owner != 0, \"invalid address\");\n        storage.owner.write(AztecAddress::new(owner));\n    }\n\n    #[aztec(public)]\n    fn create(\n        token0_: AztecAddress,\n        token1_: AztecAddress,\n        reserve0_: Field,\n        reserve1_: Field,\n        nonce_for_transfer0_: Field,\n        nonce_for_transfer1_: Field\n    ) {\n        assert(storage.owner.read().address == context.msg_sender(), \"Sender is not the owner.\");\n        assert((storage.reserve0.read() == 0) & (storage.reserve1.read() == 0), \"Token pair exists.\");\n\n        Token::at(token0_.address).transfer_public(\n            context,\n            context.msg_sender(),\n            context.this_address(),\n            reserve0_,\n            nonce_for_transfer0_,\n        );\n        Token::at(token1_.address).transfer_public(\n            context,\n            context.msg_sender(),\n            context.this_address(),\n            reserve1_,\n            nonce_for_transfer1_,\n        );\n\n        storage.token0.write(token0_);\n        storage.token1.write(token1_);\n\n        storage.reserve0.write(reserve0_);\n        storage.reserve1.write(reserve1_);\n\n        storage.kLast.write(reserve0_ * reserve1_);\n    }\n\n    #[aztec(public)]\n    fn swap(\n        token_in_: AztecAddress,\n        amount_in_: Field,\n        nonce_for_transfer_: Field,\n    ) {\n        assert(token_in_.eq(storage.token0.read()) | token_in_.eq(storage.token1.read()), \"Token address is incorrect\");\n\n        if (token_in_.eq(storage.token0.read())) {\n            let new_reserve0 = storage.reserve0.read() + amount_in_;\n            let new_reserve1 = serializeU120(SafeU120::new(storage.kLast.read()).div(SafeU120::new(new_reserve0)))[0];\n            let amount_out = storage.reserve1.read() - new_reserve1;\n\n            Token::at(token_in_.address).transfer_public(\n               context,\n               context.msg_sender(),\n               context.this_address(),\n               amount_in_,\n               nonce_for_transfer_,\n            );\n            storage.reserve0.write(new_reserve0);\n\n            Token::at(storage.token1.read().address).transfer_public(\n                context,\n                context.this_address(),\n                context.msg_sender(),\n                amount_out,\n                0,\n            );\n            storage.reserve1.write(new_reserve1);\n        } else {\n            let new_reserve1 = storage.reserve1.read() + amount_in_;\n            let new_reserve0 = serializeU120(SafeU120::new(storage.kLast.read()).div(SafeU120::new(new_reserve1)))[0];\n            let amount_out = storage.reserve0.read() - new_reserve0;\n\n            Token::at(token_in_.address).transfer_public(\n                context,\n                context.msg_sender(),\n                context.this_address(),\n                amount_in_,\n                nonce_for_transfer_,\n            );\n            storage.reserve1.write(new_reserve1);\n\n            Token::at(storage.token0.read().address).transfer_public(\n                context,\n                context.this_address(),\n                context.msg_sender(),\n                amount_out,\n                0,\n            );\n            storage.reserve0.write(new_reserve0);\n        }\n    }\n\n    unconstrained fn test(\n        token_in_: AztecAddress,\n        amount_in_: Field,\n        nonce_for_transfer_: Field,\n    ) -> [Field; 5] {\n        let new_reserve0 = storage.reserve0.read() + amount_in_;\n        let new_reserve1 = serializeU120(SafeU120::new(storage.kLast.read()).div(SafeU120::new(new_reserve0)))[0];\n        let amount_out = storage.reserve1.read() - new_reserve1;\n\n        [storage.reserve0.read(), storage.reserve1.read(), new_reserve0, new_reserve1, amount_out]\n    }\n\n    unconstrained fn get_reserves() -> [Field; 2] {\n       [storage.reserve0.read(), storage.reserve1.read()]\n    }\n\n    unconstrained fn compute_note_hash_and_nullifier(\n        contract_address: Field,\n        nonce: Field,\n        storage_slot: Field,\n        serialized_note: [Field; 0]) -> [Field; 4] {\n        [0, 0, 0, 0]\n    }\n\n    unconstrained fn serializeU120(value: SafeU120) -> [Field; SAFE_U120_SERIALIZED_LEN] {\n        [value.value as Field]\n    }\n}",
        "path": "/Users/vovkapultik/Projects/ZKBank/aztec-dex/contracts/dex/src/main.nr"
      },
      "23": {
        "source": "\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field.nr"
      },
      "34": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "37": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/Users/vovkapultik/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.14.1/yarn-project/aztec-nr/aztec/src/abi.nr"
      },
      "40": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/Users/vovkapultik/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.14.1/yarn-project/aztec-nr/aztec/src/context.nr"
      },
      "41": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n  let sha256_hashed = sha256(bytes_to_hash);\n\n  // Convert it to a field element\n  let mut v = 1;\n  let mut high = 0 as Field;\n  let mut low = 0 as Field;\n\n  for i in 0..16 {\n      high = high + (sha256_hashed[15 - i] as Field) * v;\n      low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n      v = v * 256;\n  }\n\n  // Abuse that a % p + b % p = (a + b) % p and that low < p\n  let hash_in_a_field = low + high * v;\n\n  hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n  // TODO(#1205) This is probably not the right index to use\n  pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n  pedersen_hash_with_separator(inputs, hash_index)\n}",
        "path": "/Users/vovkapultik/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.14.1/yarn-project/aztec-nr/aztec/src/hash.nr"
      },
      "56": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/Users/vovkapultik/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.14.1/yarn-project/aztec-nr/aztec/src/oracle/arguments.nr"
      },
      "64": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/Users/vovkapultik/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.14.1/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"
      },
      "65": {
        "source": "use crate::constants_gen::RETURN_VALUES_LENGTH;\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}\n",
        "path": "/Users/vovkapultik/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.14.1/yarn-project/aztec-nr/aztec/src/oracle/public_call.nr"
      },
      "67": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/Users/vovkapultik/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.14.1/yarn-project/aztec-nr/aztec/src/oracle/storage.nr"
      },
      "70": {
        "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
        "path": "/Users/vovkapultik/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.14.1/yarn-project/aztec-nr/aztec/src/public_call_stack_item.nr"
      },
      "71": {
        "source": "use crate::utils::field_from_bytes;\n\nglobal SELECTOR_SIZE = 4;\n\npub fn compute_selector<N>(signature: str<N>) -> Field {\n    let bytes = signature.as_bytes();\n    let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n    \n    let mut selector_be_bytes = [0; SELECTOR_SIZE];\n    for i in 0..SELECTOR_SIZE {\n        selector_be_bytes[i] = hash[i];\n    }\n\n    field_from_bytes(selector_be_bytes, true)\n}",
        "path": "/Users/vovkapultik/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.14.1/yarn-project/aztec-nr/aztec/src/selector.nr"
      },
      "75": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/Users/vovkapultik/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.14.1/yarn-project/aztec-nr/aztec/src/state_vars/public_state.nr"
      },
      "79": {
        "source": "struct AztecAddress {\n  address: Field\n}\n\nimpl AztecAddress {\n  pub fn new(address: Field) -> Self {\n    Self {\n      address\n    }\n  }\n\n  pub fn eq(self: Self, other: Self) -> bool {\n    self.address == other.address\n  }\n\n  pub fn serialize(self: Self) -> [Field; 1] {\n    [self.address]\n  }\n\n  pub fn deserialize(fields: [Field; 1]) -> Self {\n    Self {\n      address: fields[0]\n    }\n  }\n}\n\nstruct EthereumAddress {\n  address: Field\n}\n\nimpl EthereumAddress {\n  pub fn new(address: Field) -> Self {\n    // Check that it actually will fit. Spending a lot of constraints here :grimacing:\n    let bytes = address.to_be_bytes(32);\n    for i in 0..12 {\n        assert(bytes[i] == 0, \"Value too large for an ethereum address\");\n    }\n    Self {\n      address\n    }\n  }\n\n\n  pub fn serialize(self: Self) -> [Field; 1] {\n    [self.address]\n  }\n\n  pub fn deserialize(fields: [Field; 1]) -> Self {\n    Self {\n      address: fields[0]\n    }\n  }\n}",
        "path": "/Users/vovkapultik/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.14.1/yarn-project/aztec-nr/aztec/src/types/address.nr"
      },
      "84": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\n// docs:start:field_serialization\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nfn deserializeField(fields: [Field; FIELD_SERIALIZED_LEN]) -> Field {\n    fields[0]\n}\n\nfn serializeField(value: Field) -> [Field; FIELD_SERIALIZED_LEN] {\n    [value]\n}\n\nglobal FieldSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeField,\n    serialize: serializeField,\n};\n// docs:end:field_serialization",
        "path": "/Users/vovkapultik/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.14.1/yarn-project/aztec-nr/aztec/src/types/type_serialization/field_serialization.nr"
      },
      "86": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\nuse crate::types::address::AztecAddress;\n\nglobal AZTEC_ADDRESS_SERIALIZED_LEN: Field = 1;\n\nfn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> AztecAddress {\n    AztecAddress::new(fields[0])\n}\n\nfn serialize(value: AztecAddress) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n    [value.address]\n}\n\nglobal AztecAddressSerializationMethods = TypeSerializationInterface {\n    deserialize,\n    serialize,\n};",
        "path": "/Users/vovkapultik/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.14.1/yarn-project/aztec-nr/aztec/src/types/type_serialization/aztec_address_serialization.nr"
      },
      "87": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/Users/vovkapultik/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.14.1/yarn-project/aztec-nr/aztec/src/utils.nr"
      },
      "93": {
        "source": "struct SafeU120 {\n    value: u120,\n}\n\nimpl SafeU120 {\n    pub fn min() -> Self {\n        Self {\n            value: 0\n        }\n    }\n\n    pub fn max() -> Self {\n        Self {\n            value: 0xffffffffffffffffffffffffffffff\n        }\n    }\n\n    pub fn new(\n        value: Field,\n    ) -> Self {\n        // Check that it actually will fit. Spending a lot of constraints here :grimacing:\n        let bytes = value.to_be_bytes(32);\n        for i in 0..17 {\n            assert(bytes[i] == 0, \"Value too large for SafeU120\");\n        }\n        Self {\n            value: value as u120\n        }\n    }\n\n    pub fn is_zero(\n        self: Self,\n    ) -> bool {\n        self.value == 0\n    }\n\n    pub fn eq(\n        self: Self,\n        other: Self\n    ) -> bool {\n        self.value == other.value\n    }\n\n    pub fn lt(self: Self, other: Self) -> bool {\n        self.value < other.value\n    }\n\n    pub fn le(self: Self, other: Self) -> bool {\n        self.value <= other.value\n    }\n\n    pub fn gt(self: Self, other: Self) -> bool {\n        self.value > other.value\n    }\n\n    pub fn ge(self: Self, other: Self) -> bool {\n        self.value >= other.value\n    }\n\n    pub fn sub(\n      self: Self,\n      b: Self,\n    ) -> Self {\n        assert(self.value >= b.value, \"Underflow\");\n        Self {\n            value: self.value - b.value\n        }\n    }\n\n    pub fn add(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value + b.value;\n        assert(c >= self.value, \"Overflow\");\n        Self {\n            value: c\n        }\n    }\n\n    pub fn mul(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value * b.value;\n        if !b.is_zero() {\n            assert(c / b.value == self.value, \"Overflow\");\n        }\n        Self {\n            value: c\n        }\n    }\n\n    pub fn div(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        assert(!b.is_zero(), \"Divide by zero\");\n        Self {\n            value: self.value / b.value\n        }\n    }\n\n    pub fn mul_div(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        self.mul(b).div(divisor)\n    }\n\n    pub fn mul_div_up(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        let c = self.mul(b);\n        assert(!divisor.is_zero(), \"Divide by zero\");\n        let adder = ((self.value * b.value % divisor.value) as u120 > 0) as u120;\n        c.div(divisor).add(Self {value: adder})\n    }\n\n    // todo: implement mul_div with 240 bit intermediate values.\n}\n\n#[test]\nfn test_init() {\n    let a = SafeU120::new(1);\n    assert(a.value == 1);\n}\n\n#[test]\nfn test_init_max() {\n    let a = SafeU120::max();\n    assert(a.value == 0xffffffffffffffffffffffffffffff);\n}\n\n#[test]\nfn test_init_min() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n}\n\n#[test]\nfn test_is_zero() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n    assert(a.is_zero() == true);\n}\n\n#[test]\nfn test_eq() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(1);\n    assert(a.eq(b));\n}\n\n#[test]\nfn test_lt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(a.lt(b));\n    assert(b.lt(a) == false);\n}\n\n\n#[test]\nfn test_le() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.le(b));\n    assert(a.le(c));\n    assert(c.le(a) == false);\n}\n\n#[test]\nfn test_gt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(b.gt(a));\n    assert(a.gt(b) == false);\n}\n\n\n#[test]\nfn test_ge() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.ge(b));\n    assert(a.ge(c) == false);\n    assert(c.ge(a));\n}\n\n#[test(should_fail)]\nfn test_init_too_large() {\n    let b = SafeU120::max().value as Field + 1; // max + 1\n    let _a = SafeU120::new(b);\n}\n\n#[test]\nfn test_add() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let c = SafeU120::add(a, b);\n    assert(c.value == 3);\n}\n\n#[test(should_fail)]\nfn test_add_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(1);\n    let _c = SafeU120::add(a, b);\n}\n\n#[test]\nfn test_sub() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(1);\n    let c = SafeU120::sub(a, b);\n    assert(c.value == 1);\n}\n\n#[test(should_fail)]\nfn test_sub_underflow() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let _c = SafeU120::sub(a, b);\n}\n\n#[test]\nfn test_mul() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(3);\n    let c = SafeU120::mul(a, b);\n    assert(c.value == 6);\n}\n\n#[test(should_fail)]\nfn test_mul_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let _c = SafeU120::mul(a, b);\n}\n\n#[test]\nfn test_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::div(a, b);\n    assert(c.value == 2);\n}\n\n#[test(should_fail)]\nfn test_div_by_zero() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(0);\n    let _c = SafeU120::div(a, b);\n}\n\n#[test]\nfn test_mul_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div(a, b, c);\n    assert(d.value == 9);\n}\n\n#[test(should_fail)]\nfn test_mul_div_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test(should_fail)]\nfn test_mul_div_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(4);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test]\nfn test_mul_div_up_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(5);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 4);\n}\n\n#[test]\nfn test_mul_div_up_non_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 9);\n}\n\n\n#[test(should_fail)]\nfn test_mul_div_up_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(9);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n\n// It should not be possible for us to overflow `mul_div_up` through the adder, since that require the divisor to be 1\n// since we otherwise would not be at the max value. If divisor is 1, adder is 0.\n#[test(should_fail)]\nfn test_mul_div_up_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n",
        "path": "/Users/vovkapultik/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.14.1/yarn-project/aztec-nr/safe-math/src/safe_u120.nr"
      },
      "96": {
        "source": "use dep::aztec::{\n  context::{PublicContext, PrivateContext},\n  selector::compute_selector,\n  types::address::{AztecAddress},\n};\n\nstruct Token {\n  address: Field,\n}\n\nimpl Token {\n    pub fn at(address: Field) -> Self {\n        Self { address }\n    }\n\n    pub fn transfer_public(self: Self, context: PublicContext, from: Field, to: Field, amount: Field, nonce: Field) {\n        let _transfer_return_values = context.call_public_function(\n          self.address,\n          compute_selector(\"transfer_public((Field),(Field),Field,Field)\"),\n          [from, to, amount, nonce]\n        );\n    }\n}",
        "path": "/Users/vovkapultik/Projects/ZKBank/aztec-dex/contracts/dex/src/interfaces.nr"
      }
    }
  }
}